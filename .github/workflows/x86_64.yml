#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================

name: Build OpenWrt x86_64

on:
  release:
    types: [published]
  push:
    branches:
      - master
    paths:
      - 'makeconfig.d/x86_64/.config'
#  schedule:
#    - cron: 0 8 * * 5
#  watch:
#    types: [started]


env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  CONFIG_TARGET: x86_64
  DEFCONFIG_FILE: ./makeconfig.d/x86_64/.config
  DIY_SH: diy.sh
  FREE_UP_DISK: true
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  CACHE: true
  CACHE_VERSION: 1
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 本地代码
      - name: 【User】 Checkout
        uses: actions/checkout@master
      # 完整的openwrt源码
      - name: 【OpenWrt】 Clone source code
        run: git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
      # 初始化环境
      - name: 【Linux】 Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt-get -y update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler
      # 清理磁盘
      - name: 【Linux】 Free up disk space
        if: env.FREE_UP_DISK == 'true'
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /usr/share/dotnet
          docker rmi `docker images -q`
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get -y clean
      # 自定义脚本
      - name: 【User】Run DIY sh
        run: |
          chmod +x $DIY_SH
          ./$DIY_SH
          

      # 下载文件
      - name: 【Cache】 openwrt dl
        uses: biner/cache@master
        env:
          cache-name: cache-openwrt-dl
        with:
          path: ./openwrt/dl 
          key: ${{ runner.os }}-${{ env.CONFIG_TARGET }}-${{ env.cache-name }}-${{ env.CACHE_VERSION }}
            
      # 工具链
      - name: 【Cache】 openwrt staging
        uses: biner/cache@master
        env:
          cache-name: cache-openwrt-stagingd-dir
        with:
          path: ./openwrt/staging_dir
          key: ${{ runner.os }}-${{ env.CONFIG_TARGET }}-${{ env.cache-name }}-${{ env.CACHE_VERSION }}

      # 工具链
      - name: 【Cache】 openwrt build_dir
        uses: biner/cache@master
        env:
          cache-name: cache-openwrt-build-dir
        with:
          path: ./openwrt/build_dir
          key: ${{ runner.os }}-${{ env.CONFIG_TARGET }}-${{ env.cache-name }}-${{ env.CACHE_VERSION }}


      - name: 【OpenWrt】 Update feeds
        run: cd openwrt && ./scripts/feeds update -a

      - name: 【OpenWrt】 Install feeds
        run: cd openwrt && ./scripts/feeds install -a

      # 自定义配置
      - name: 【OpenWrt】 Load custom configuration
        run: |
          cp $DEFCONFIG_FILE ./openwrt/.config
          echo "defconfig start"
          cd openwrt
          make defconfig
      
      # openwrt 下载package    
      - name: 【OpenWrt】 Download package
        id: package
        run: |
          cd openwrt
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;
          
      # openwrt 编译固件 
      - name: 【OpenWrt】 Compile the firmware
        id: compile
        run: |
          cd openwrt
          echo "======================="
          echo -e "thread compile: $(nproc) "
          echo "======================="
          make -j$(nproc) || make -j1 V=s
          echo "::set-output name=status::success"

      - name: 【OpenWrt】 space show
        run: |
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          cd openwrt
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          echo "======================="
          du -h --max-depth=1 ./build_dir
          echo "======================="
          du -h --max-depth=1 ./bin
          
      - name: 【OpenWrt】 Prepare artifact
        run: |
          cd openwrt
          find ./bin/targets/ -type d -name "packages" | xargs rm -rf {}
          find ./bin/targets/ -name "*rootfs-squashfs.img.gz" | xargs rm -rf {}
        
      - name: 【OpenWrt】 Upload artifact
        uses: actions/upload-artifact@master
        with:
          name: OpenWrt firmware
          path: ./openwrt/bin/targets/
        

#       - name: 【OpenWrt】 Upload bin directory
#         uses: actions/upload-artifact@master
#         if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
#         with:
#           name: OpenWrt_directory
#           path: openwrt/bin

#       - name: 【OpenWrt】 Organize files
#         id: organize
#         if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
#         run: |
#           cd openwrt/bin/targets/*/*
#           rm -rf packages
#           echo "::set-env name=FIRMWARE::$(pwd)"
#           echo "::set-output name=status::success"

#       - name: 【OpenWrt】 Upload firmware directory
#         uses: actions/upload-artifact@master
#         if: steps.organize.outputs.status == 'success' && !cancelled()
#         with:
#           name: OpenWrt_firmware
#           path: ${{ env.FIRMWARE }}
