#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================

name: Build OpenWrt x86_64

on:
  release:
    types: [published]
  push:
    branches:
      - master
    paths:
      - 'makeconfig.d/x86_64/.config'
#  schedule:
#    - cron: 0 8 * * 5
#  watch:
#    types: [started]

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  CONFIG_FILE: .config
  DEFCONFIG_FILE: ./makeconfig.d/x86_64/.config
  DIY_SH: diy.sh
  FREE_UP_DISK: false
  SSH_ACTIONS: false
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  CACHE: true
  CACHE_VERSION: 1
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: 【User】 Checkout
      uses: actions/checkout@master


    - name: 【OpenWrt】 Clone source code
      run: git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt


        
    - name: 【Linux】 Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -y update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler

    - name: 【Linux】 Free up disk space
      if: env.FREE_UP_DISK == 'true'
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /usr/share/dotnet
        docker rmi `docker images -q`
        sudo -E apt-get -q purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        
    - name: 【User】Run DIY sh
      run: |
        chmod +x $DIY_SH
        ./$DIY_SH
        

        
        
    # 下载文件
    - name: 【Cache】  dl
      if: env.CACHE == 'true'
      uses: actions/cache@master
      env:
        cache-name: cache-openwrt-dl
      with:
        path: ./openwrt/dl
        key: ${{ runner.os }}-stable-${{ env.cache-name }}-${{ env.CACHE_VERSION }}
          
    - name: 【OpenWrt】 Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: 【OpenWrt】 Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    # 自定义配置
    - name: 【OpenWrt】 Load custom configuration
      run: |
        cp $DEFCONFIG_FILE ./openwrt/.config
        echo "defconfig start"
        cd openwrt
        make defconfig
        

    - name: SSH connection to Actions
      uses: P3TERX/debugger-action@master
      if: env.SSH_ACTIONS == 'true'

    - name: 【OpenWrt】 Download package
      id: package
      run: |
        cd openwrt
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 【OpenWrt】 Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 V=s
        echo "::set-output name=status::success"

    - name: 【OpenWrt】 Upload bin directory
      uses: actions/upload-artifact@master
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_directory
        path: openwrt/bin

    - name: 【OpenWrt】 Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "::set-env name=FIRMWARE::$(pwd)"
        echo "::set-output name=status::success"

    - name: 【OpenWrt】 Upload firmware directory
      uses: actions/upload-artifact@master
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware
        path: ${{ env.FIRMWARE }}
