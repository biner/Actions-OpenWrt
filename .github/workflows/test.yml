name: Build OpenWrt Test

on:
  release:
    types: [published]
  push:
    branches:
      - master
    paths:
     # - 'makeconfig.d/newifi-d2/.config'
      - '.github/workflows/test.yml'

  schedule:
    - cron: 59 3 1 * *
#  watch:
#    types: [started]

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  CONFIG_TARGET: newifi-d2
  DEFCONFIG_FILE: ./makeconfig.d/newifi-d2/.config
  FREE_UP_DISK: true
  UPLOAD_FIRMWARE: true
  UPLOAD_FIRMWARE_TRANSFER: true
  CACHE: true
  CACHE_VERSION: onlygit
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-18.04

    steps:
      # 本地代码
      - name: 【User】 Checkout
        uses: actions/checkout@master
#       # 完整的openwrt源码
#       - name: 【OpenWrt】 Clone source code
#         run: |
#           git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt

#           git clone --depth 1 https://github.com/vernesong/OpenClash.git -b master OpenClash
#           cp OpenClash/luci-app-openclash openwrt/package/luci-app-openclash -rf
          
#           cd openwrt
#           git log --oneline -1
#           git log --oneline -1 | md5sum |cut -d" " -f1
#           echo "FIRMWARE_HASH=$(git log --oneline -1 | md5sum |cut -d" " -f1)" >> $GITHUB_ENV

      # 初始化环境
      - name: 【Linux】 Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          df -h
#sudo -E apt-get -y update
#sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler


      # 下载文件
      - name: 【Cache】 openwrt dl
        id: cache-primes
        if: env.CACHE == 'true'
        uses: actions/cache@v2
        env:
          cache-name: cache-openwrt
        with:
          path: ./openwrt
          key: ${{ runner.os }}-${{ env.CONFIG_TARGET }}-${{ env.cache-name }}-${{ env.CACHE_VERSION }}-${{ env.FIRMWARE_HASH }}
          restore-keys: ${{ runner.os }}-${{ env.CONFIG_TARGET }}-${{ env.cache-name }}-${{ env.CACHE_VERSION }}-
          
      - name: Generate Prime Numbers
        run: |
          
          if [ -d ./openwrt ]; then
              echo "file found..."
              cd openwrt && git pull
          else
              echo "no such file!"
              git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
          fi

          if [ -d ./openwrt/package/luci-app-openclash ]; then
              echo "file found..."
              cd openwrt/package/luci-app-openclash && git pull
          else
              echo "no such file!"
              git clone --depth 1 https://github.com/vernesong/OpenClash.git -b master OpenClash
          fi
          
      - name: hash
        run: |
          cd openwrt
          git log --oneline -1
          git log --oneline -1 | md5sum |cut -d" " -f1
          echo "FIRMWARE_HASH=$(git log --oneline -1 | md5sum |cut -d" " -f1)" >> $GITHUB_ENV
        
      # Cache 打包
      - name: Prepare cache
        if: env.CACHE == 'true'
        run: |
          rm ./openwrt/bin -rf
        
        
