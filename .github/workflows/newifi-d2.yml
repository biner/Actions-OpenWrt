name: Build OpenWrt newifi-d2

on:
  release:
    types: [published]
  push:
    branches:
      - master
    paths:
     # - 'makeconfig.d/newifi-d2/.config'
      - '.github/workflows/newifi-d2.yml'

  schedule:
    - cron: 59 3 1 * *
#  watch:
#    types: [started]

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  CONFIG_TARGET: newifi-d2
  DEFCONFIG_FILE: ./makeconfig.d/newifi-d2/.config
  FREE_UP_DISK: true
  UPLOAD_FIRMWARE: true
  UPLOAD_FIRMWARE_TRANSFER: true
  CACHE: true
  CACHE_VERSION: auto
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-18.04

    steps:
      # 本地代码
      - name: 【User】 Checkout
        uses: actions/checkout@master
      # 完整的openwrt源码
      - name: 【OpenWrt】 Clone source code
        run: |
          git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt

          cd openwrt
          git log --oneline -1
          git log --oneline -1 | md5sum |cut -d" " -f1
          echo "FIRMWARE_HASH=$(git log --oneline -1 | md5sum |cut -d" " -f1)" >> $GITHUB_ENV
          

      # 清理磁盘
      - name: 【Linux】 Free up disk space
        if: env.FREE_UP_DISK == 'true'
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-1804)
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir

      # 初始化环境
      - name: 【Linux】 Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          df -h
#sudo -E apt-get -y update
#sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler


      # 下载文件
      - name: 【Cache】 openwrt dl
        id: cache-primes
        if: env.CACHE == 'true'
        uses: actions/cache@v2
        env:
          cache-name: cache-openwrt
        with:
          path: |
            ./openwrt
            !./openwrt/bin
            !./openwrt/OpenClash
          key: ${{ runner.os }}-${{ env.CONFIG_TARGET }}-${{ env.cache-name }}-${{ env.CACHE_VERSION }}-${{ env.FIRMWARE_HASH }}
          restore-keys: ${{ runner.os }}-${{ env.CONFIG_TARGET }}-${{ env.cache-name }}-${{ env.CACHE_VERSION }}-
          
      - name: Generate Prime Numbers
        run: |
          
          if [ -d ./openwrt ]; then
              echo "file found..."
              cd openwrt && git pull
          else
              echo "no such file!"
              git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
          fi

      - name: ext package
        run: |
          mkdir  openwrt/package/ext 
          git clone --depth 1 https://github.com/vernesong/OpenClash.git -b master OpenClash
          cp OpenClash/luci-app-openclash openwrt/package/ext/luci-app-openclash -rf


      - name: 【OpenWrt】 Update feeds
        run: cd openwrt && ./scripts/feeds update -a

      - name: 【OpenWrt】 Install feeds
        run: cd openwrt && ./scripts/feeds install -a

      # 自定义配置
      - name: 【OpenWrt】 Load custom configuration
        run: |
          cp $DEFCONFIG_FILE ./openwrt/.config
          echo "defconfig start"
          cd openwrt
          make defconfig

      # openwrt 下载package    
      - name: 【OpenWrt】 Download package
        id: package
        run: |
          cd openwrt
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;
          
      - name: 【OpenWrt】 space show
        run: |
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          cd openwrt
          du -h --max-depth=1 ./
          echo "======================="
          du -h --max-depth=1 ./build_dir
          
      # openwrt 编译固件 
      - name: 【OpenWrt】 Compile the firmware
        id: compile
        run: |
          cd openwrt
          echo "======================="
          echo -e "thread compile: $(nproc) "
          echo "======================="
          echo "::set-output name=status::nosuccess"
# make -j$(($(nproc) + 1)) || make -j1 V=s
    
      - name: 【OpenWrt】 space show
        run: |
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          cd openwrt
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          echo "======================="
          du -h --max-depth=1 ./build_dir
          echo "======================="
          du -h --max-depth=1 ./bin
          
      - name: 【OpenWrt】 Prepare artifact
        id: organize
        if: steps.compile.outputs.status == 'success' && !cancelled()
        run: |
          cd openwrt
          find ./bin/targets/ -type d -name "packages" | xargs rm -rf {}
          find ./bin/targets/ -name "*rootfs*.gz" | xargs rm -rf {}
          find ./bin/targets/ -name "*initramfs-kernel.bin" | xargs rm -rf {}
          cd ..
          cd openwrt/bin/targets/*/*
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "::set-output name=status::success"
        
      - name: 【OpenWrt】 Upload artifact
        uses: actions/upload-artifact@master
        if: steps.organize.outputs.status == 'success' && !cancelled()
        with:
          name: OpenWrt firmware ${{ env.CONFIG_TARGET }} 
          path: ./openwrt/bin/targets/
        
      - name: 【User】 transfer
        if: env.UPLOAD_FIRMWARE_TRANSFER == 'true' && steps.organize.outputs.status == 'success' && !cancelled()
        id: transfer
        uses: biner/transfer@master
        with:
          platform: cow
          path: ./openwrt/bin/targets/

      - name: Get the output time
        run:  echo "::warning ::${{ steps.transfer.outputs.uri }}"
        
        
        
